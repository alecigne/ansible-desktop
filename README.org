#+TITLE: Ansible Desktop

This repository aims at automating the setup of my Debian workstations
using [[https://www.ansible.com/][Ansible]].

This repo works in combination with my [[https://github.com/alecigne/my-utils][utils]] (my own small
housekeeping programs) and my [[https://github.com/alecigne/dotfiles][dotfiles]] (config files for the programs
I use).

* Procedure

This short documentation acts as a personal reminder :)

** Basic Debian installation
:PROPERTIES:
:CREATED:  [2021-08-19 Thu 19:14]
:END:

1. Download a =netinst= ISO image from the [[https://www.debian.org/distrib/netinst][official website]].

2. Create a bootable USB drive:

   #+begin_src sh
     sudo dd if=[path_to_iso] of=[path_to_usb]
   #+end_src

   I usually use =lsblk= to know the path to the USB drive. *Be
   careful*, as choosing the wrong path might cause serious damage.

3. Install Debian.

   *Note*: the Debian installation itself can be automated using
   [[https://www.debian.org/releases/stable/amd64/apb.en.html][preseeding]]. My experimental preseed configuration can be found on
   the =preseed= branch [[https://github.com/alecigne/ansible-desktop/blob/preseed/debian_preseed/preseed.cfg][here]].

   A manual install works for me at the moment. Here are a few
   important choices I usually make:

   - I usually set up an encrypted LVM.

   - I don't create a =root= user, only a normal user, who will
     automatically be placed in the =sudo= group. This is convenient
     since I don't have to manually install =sudo= on the new machine.

   - I only install the standard system utilities and the SSH server,
     i.e. no X server nor desktop environment such as GNOME - Ansible
     will take care of everything. The SSH server is required to
     connect to the machine from the Ansible controller (usually
     another machine on my network).

** Provisioning
:PROPERTIES:
:CREATED:  [2021-08-25 Wed 21:52]
:END:

*** Run from a controller
:PROPERTIES:
:CREATED:  [2021-08-27 Fri 13:50]
:END:

The provisioning may be done from a so-called controller, i.e. another
machine on my local network.

1. Test the connection. For example:

   #+begin_src sh
     ansible -m ping -i localhost, -e "ansible_port=2222" --ask-pass all
   #+end_src

   This is for a [[https://lecigne.net/notes/qemu.html][QEMU virtual machine]] with a SSH port forwarding on
   port =2222=. For a "normal" machine on the network, this would look
   like this:

   #+begin_src sh
     ansible -m ping -i 192.168.1.30, --ask-pass all
   #+end_src

2. Run the playbook:

   #+begin_src sh
     ansible-playbook \
         -i localhost, \
         -e "ansible_port=2222" \
         --ask-pass \
         --ask-become-pass \
         --ask-vault-pass \
         playbook.yml
   #+end_src

   #+RESULTS:

   - =--ask-pass= is necessary for the SSH connection (=sshpass= is
     installed on the controller).

   - =--ask-become-pass= is for sudo.

   - =--ask-vault-pass= is for decrypting the vault. I use it to store
     a Github token allowing to add a public key (see the
     [[file:roles/github-deploy-key/][github-deploy-key]] role).

[TODO] My personal GPG key must be present on the target hosts.

*** Run locally
:PROPERTIES:
:CREATED:  [2021-08-25 Wed 23:41]
:END:

Alternatively, the playbook can be executed on the current machine
itself (=localhost=) if all the necessary tools are already installed
(=ansible=, etc.). This is useful to maintain my current machine in a
desired state defined by Ansible.

#+begin_src sh
  ansible-playbook \
      -i localhost, \
      -e "ansible_connection=local" \
      --ask-pass \
      --ask-become-pass \
      --ask-vault-pass \
      playbook.yml
#+end_src

*** Run locally after bootstrapping
:PROPERTIES:
:CREATED:  [2021-08-27 Fri 13:53]
:END:

[TODO] Finally, the playbook might also be run locally on a fresh
Debian install by running a bootstrapping script.

* Tasks

- [X] Pull dotfiles submodules. The new workstation must register
  itself to Github (SSH key) or a SSH keypair must be created
  beforehand as a manual step.

- [X] Do not re-execute Stow every time

- [X] Reduce manual steps to a minimum

- [X] Switch from tasks to roles

- [ ] Customize the Debian installation. Interesting links:

  + [[https://www.debian.org/releases/buster/amd64/apb.en.html][Preseeding]]
  + [[https://wiki.debian.org/DebianCustomCD][Building a Custom Debian CD Set]]
  + [[https://wiki.debian.org/Simple-CDD][=simple-cdd=]]

- Packages to add:

  + [ ] =veracrypt= \\
    Check [[https://github.com/rodrigorega/ansible-role-VeraCrypt/blob/master/tasks/main.yml][this]].
  + [ ] =signal-desktop=

- [ ] Study the difference between =import= and =include= and act
  accordingly

- [ ] Read about Molecule

- [ ] Deploy Firefox with extensions
  + https://support.mozilla.org/en-US/kb/deploying-firefox-with-extensions
  + https://github.com/alzadude/ansible-firefox-addon
