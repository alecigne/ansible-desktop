#+TITLE: Ansible Desktop

This repository aims at automating the setup of my Debian workstations
using [[https://www.ansible.com/][Ansible]].

This repo works in combination with my [[https://github.com/alecigne/my-utils][utils]] (my own small
housekeeping programs) and my [[https://github.com/alecigne/dotfiles][dotfiles]] (config files for the programs
I use).

* Procedure

This short documentation acts as a personal reminder :)

** Installing and upgrading Debian

1. Download a =netinst= ISO image from the [[https://www.debian.org/distrib/netinst][official website]].

2. Create a bootable USB drive:

   #+begin_src sh
     sudo dd if=[path_to_iso] of=[path_to_usb]
   #+end_src

   I usually use =lsblk= to know the path to the USB drive. *Be
   careful*, as choosing the wrong path might cause serious damage.

3. Install Debian. I set up an encrypted LVM and I install the
   standard system utilities only.

4. [as root] Edit =/etc/apt/sources.list=; I use =unstable=:

   #+begin_example
     deb http://deb.debian.org/debian/ unstable main contrib non-free
     deb-src http://deb.debian.org/debian/ unstable main contrib non-free
   #+end_example

5. [as root] Upgrade the system:

   #+begin_src sh
     apt update && apt upgrade
   #+end_src

** Installing and configuring necessary packages

1. [as root] Install Ansible, Git and sudo:

   #+begin_src sh
     apt install ansible git sudo
   #+end_src

   - Ansible is needed for... running our Ansible setup!
   - Ansible needs =git= for cloning repos and =sudo= for running some
     commands. Besides, I need =git= to clone this repo on the
     machine.

2. [as root] Add yourself to the =sudoers= file:

   #+begin_src sh
     echo "alc ALL=(ALL:ALL) ALL" > /etc/sudoers.d/alc
   #+end_src

** Running the installation playbook

1. Generate a SSH key pair and add the public key to Github for the
   new workstation:

   #+begin_src sh
     ssh-keygen -t ed25519 -C "email@example.com"
     scp ~/.ssh/id_ed25519.pub alc@[ip]:/home/alc
   #+end_src

2. Update the SSH agent:

   #+begin_src sh
     eval $(ssh-agent -s)
     ssh-add
   #+end_src

3. Clone the repository:

   #+begin_src sh
     git clone git@github.com:alecigne/ansible-desktop.git
   #+end_src

4. [recommended] Import my GnuPG keys.

5. In the repo's directory, launch the Ansible playbook as a user
   (Ansible will use =sudo= on a per-need basis):

   #+begin_src sh
     ansible-playbook playbook.yml -K
   #+end_src

   =-K= tells Ansible to ask for the user password in order to use
   =sudo=.

   With tags:

   #+begin_src sh
     ansible-playbook playbook.yml -K --tags [tags]
   #+end_src

* About =ansible-pull=

From the Ansible documentation:

#+begin_quote
The ansible-pull is a small script that will checkout a repo of
configuration instructions from git, and then run ansible-playbook
against that content.
#+end_quote

Thus, I could also launch the script with:

#+begin_src sh
  ansible-pull -U https://github.com/alecigne/ansible-desktop.git -K -C [branch]
#+end_src

I prefer the more detailed output of =ansible-playbook=.

* Tasks

- [X] Pull dotfiles submodules. The new workstation must register
  itself to Github (SSH key) or a SSH keypair must be created
  beforehand as a manual step.

- [X] Do not re-execute Stow every time

- [ ] Customize the Debian installation. Interesting links:

  + [[https://www.debian.org/releases/buster/amd64/apb.en.html][Preseeding]]
  + [[https://wiki.debian.org/DebianCustomCD][Building a Custom Debian CD Set]]
  + [[https://wiki.debian.org/Simple-CDD][=simple-cdd=]]

- Packages to add:

  + [ ] =veracrypt= \\
    Check [[https://github.com/rodrigorega/ansible-role-VeraCrypt/blob/master/tasks/main.yml][this]].
  + [ ] =signal-desktop=

- [ ] Study the difference between =import= and =include= and act
  accordingly

- [X] Switch from tasks to roles

- [ ] Read about Molecule
